{
  "address": "0x194b121E2A5FdB69d31d6A68355d8b82CC487A68",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "approveAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "distributeAlongWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "payForAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferAlongWithETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferFromAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6de22848b8a78d6d4e0f990da540555c3cb777e76c81932fc230caaf95d49365",
  "receipt": {
    "to": null,
    "from": "0x46C61CCb7dA11C1285B32Ef7168503AD7c5BFfb2",
    "contractAddress": "0x194b121E2A5FdB69d31d6A68355d8b82CC487A68",
    "transactionIndex": 66,
    "gasUsed": "1249826",
    "logsBloom": "0x
    "blockHash": "0xc263a6fa7d756864f0db3051633541d2c5ff749cf429fdecddd8fc3690a571fe",
    "transactionHash": "0x6de22848b8a78d6d4e0f990da540555c3cb777e76c81932fc230caaf95d49365",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 8698651,
        "transactionHash": "0x6de22848b8a78d6d4e0f990da540555c3cb777e76c81932fc230caaf95d49365",
        "address": "0x194b121E2A5FdB69d31d6A68355d8b82CC487A68",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000466ff3c5c76445823b49df047d72663b8eae9272"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 122,
        "blockHash": "0xc263a6fa7d756864f0db3051633541d2c5ff749cf429fdecddd8fc3690a571fe"
      }
    ],
    "blockNumber": 8698651,
    "cumulativeGasUsed": "10258968",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x466ff3c5C76445823b49dF047d72663B8eAe9272",
    "1000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "257eebcc1370081a872b5b996303cf36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"distributeAlongWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"payForAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAlongWithETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ERC20/SimpleERC20.sol\":\"SimpleERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"src/ERC20/ERC20Base.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./ERC20Internal.sol\\\";\\nimport \\\"../Libraries/Constants.sol\\\";\\n\\ninterface ITransferReceiver {\\n\\tfunction onTokenTransfer(\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external returns (bool);\\n}\\n\\ninterface IPaidForReceiver {\\n\\tfunction onTokenPaidFor(\\n\\t\\taddress payer,\\n\\t\\taddress forAddress,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool);\\n}\\n\\ninterface IApprovalReceiver {\\n\\tfunction onTokenApproval(\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes calldata\\n\\t) external returns (bool);\\n}\\n\\nabstract contract ERC20Base is IERC20, ERC20Internal {\\n\\tusing Address for address;\\n\\n\\tuint256 internal _totalSupply;\\n\\tmapping(address => uint256) internal _balances;\\n\\tmapping(address => mapping(address => uint256)) internal _allowances;\\n\\n\\tfunction burn(uint256 amount) external virtual {\\n\\t\\taddress sender = msg.sender;\\n\\t\\t_burnFrom(sender, amount);\\n\\t}\\n\\n\\tfunction _internal_totalSupply() internal view override returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\treturn _internal_totalSupply();\\n\\t}\\n\\n\\tfunction balanceOf(address owner) external view override returns (uint256) {\\n\\t\\treturn _balances[owner];\\n\\t}\\n\\n\\tfunction allowance(address owner, address spender) external view override returns (uint256) {\\n\\t\\tif (owner == address(this)) {\\n\\t\\t\\t// see transferFrom: address(this) allows anyone\\n\\t\\t\\treturn Constants.UINT256_MAX;\\n\\t\\t}\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\tfunction decimals() external pure virtual returns (uint8) {\\n\\t\\treturn uint8(18);\\n\\t}\\n\\n\\tfunction transfer(address to, uint256 amount) external override returns (bool) {\\n\\t\\t_transfer(msg.sender, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferAlongWithETH(address payable to, uint256 amount) external payable returns (bool) {\\n\\t\\t_transfer(msg.sender, to, amount);\\n\\t\\tto.transfer(msg.value);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction distributeAlongWithETH(address payable[] memory tos, uint256 totalAmount) external payable returns (bool) {\\n\\t\\tuint256 val = msg.value / tos.length;\\n\\t\\trequire(msg.value == val * tos.length, \\\"INVALID_MSG_VALUE\\\");\\n\\t\\tuint256 amount = totalAmount / tos.length;\\n\\t\\trequire(totalAmount == amount * tos.length, \\\"INVALID_TOTAL_AMOUNT\\\");\\n\\t\\tfor (uint256 i = 0; i < tos.length; i++) {\\n\\t\\t\\t_transfer(msg.sender, tos[i], amount);\\n\\t\\t\\ttos[i].transfer(val);\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferAndCall(\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool) {\\n\\t\\t_transfer(msg.sender, to, amount);\\n\\t\\treturn ITransferReceiver(to).onTokenTransfer(msg.sender, amount, data);\\n\\t}\\n\\n\\tfunction transferFromAndCall(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool) {\\n\\t\\t_transferFrom(from, to, amount);\\n\\t\\treturn ITransferReceiver(to).onTokenTransfer(from, amount, data);\\n\\t}\\n\\n\\tfunction payForAndCall(\\n\\t\\taddress forAddress,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool) {\\n\\t\\t_transfer(msg.sender, to, amount);\\n\\t\\treturn IPaidForReceiver(to).onTokenPaidFor(msg.sender, forAddress, amount, data);\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external override returns (bool) {\\n\\t\\t_transferFrom(from, to, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction approve(address spender, uint256 amount) external override returns (bool) {\\n\\t\\t_approveFor(msg.sender, spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction approveAndCall(\\n\\t\\taddress spender,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata data\\n\\t) external returns (bool) {\\n\\t\\t_approveFor(msg.sender, spender, amount);\\n\\t\\treturn IApprovalReceiver(spender).onTokenApproval(msg.sender, amount, data);\\n\\t}\\n\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal override {\\n\\t\\trequire(owner != address(0) && spender != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\t// anybody can transfer from this\\n\\t\\t// this allow mintAndApprovedCall without gas overhead\\n\\t\\tif (msg.sender != from && from != address(this)) {\\n\\t\\t\\tuint256 currentAllowance = _allowances[from][msg.sender];\\n\\t\\t\\tif (currentAllowance != Constants.UINT256_MAX) {\\n\\t\\t\\t\\t// save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n\\t\\t\\t\\trequire(currentAllowance >= amount, \\\"NOT_AUTHOIZED_ALLOWANCE\\\");\\n\\t\\t\\t\\t_allowances[from][msg.sender] = currentAllowance - amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t_transfer(from, to, amount);\\n\\t}\\n\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(to != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n\\t\\trequire(to != address(this), \\\"INVALID_THIS_ADDRESS\\\");\\n\\t\\tuint256 currentBalance = _balances[from];\\n\\t\\trequire(currentBalance >= amount, \\\"NOT_ENOUGH_TOKENS\\\");\\n\\t\\t_balances[from] = currentBalance - amount;\\n\\t\\t_balances[to] += amount;\\n\\t\\temit Transfer(from, to, amount);\\n\\t}\\n\\n\\tfunction _transferAllIfAny(address from, address to) internal {\\n\\t\\tuint256 balanceLeft = _balances[from];\\n\\t\\tif (balanceLeft > 0) {\\n\\t\\t\\t_balances[from] = 0;\\n\\t\\t\\t_balances[to] += balanceLeft;\\n\\t\\t\\temit Transfer(from, to, balanceLeft);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(address to, uint256 amount) internal override {\\n\\t\\t_totalSupply += amount;\\n\\t\\t_balances[to] += amount;\\n\\t\\temit Transfer(address(0), to, amount);\\n\\t}\\n\\n\\tfunction _burnFrom(address from, uint256 amount) internal override {\\n\\t\\tuint256 currentBalance = _balances[from];\\n\\t\\trequire(currentBalance >= amount, \\\"NOT_ENOUGH_TOKENS\\\");\\n\\t\\t_balances[from] = currentBalance - amount;\\n\\t\\t_totalSupply -= amount;\\n\\t\\temit Transfer(from, address(0), amount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x754502e09e7526168c7320851f8f6314478e3312999f44578fe967f4c1e09f2e\",\"license\":\"AGPL-1.0\"},\"src/ERC20/ERC20Internal.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.17;\\n\\nabstract contract ERC20Internal {\\n\\tfunction _approveFor(\\n\\t\\taddress owner,\\n\\t\\taddress target,\\n\\t\\tuint256 amount\\n\\t) internal virtual;\\n\\n\\tfunction name() public virtual returns (string memory);\\n\\n\\tfunction _mint(address to, uint256 amount) internal virtual;\\n\\n\\tfunction _burnFrom(address from, uint256 amount) internal virtual;\\n\\n\\tfunction _internal_totalSupply() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xc759c90da123ddfc39740f927899f244eb6cf005e857ccb9ac1714dff5e60a03\",\"license\":\"AGPL-1.0\"},\"src/ERC20/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ERC20Base.sol\\\";\\nimport \\\"./WithPermitAndFixedDomain.sol\\\";\\n\\ncontract SimpleERC20 is ERC20Base, WithPermitAndFixedDomain {\\n\\tconstructor(address to, uint256 amount) WithPermitAndFixedDomain(\\\"1\\\") {\\n\\t\\t_mint(to, amount);\\n\\t}\\n\\n\\tstring public constant symbol = \\\"SIMPLE\\\";\\n\\n\\tfunction name() public pure override returns (string memory) {\\n\\t\\treturn \\\"Simple ERC20\\\";\\n\\t}\\n}\\n\",\"keccak256\":\"0x2cc2f2ad72ba37bdb429b30088eb2717cc5bdb36ce550f52bb54bcf4267ec80f\",\"license\":\"AGPL-1.0\"},\"src/ERC20/WithPermitAndFixedDomain.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./ERC20Internal.sol\\\";\\nimport \\\"../Interfaces/IERC2612Standalone.sol\\\";\\n\\nabstract contract WithPermitAndFixedDomain is ERC20Internal, IERC2612Standalone {\\n\\tbytes32 internal constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n\\t// solhint-disable-next-line var-name-mixedcase\\n\\tbytes32 public immutable override DOMAIN_SEPARATOR;\\n\\n\\tmapping(address => uint256) internal _nonces;\\n\\n\\tconstructor(string memory version) {\\n\\t\\tif (bytes(version).length == 0) {\\n\\t\\t\\tversion = \\\"1\\\";\\n\\t\\t}\\n\\t\\tDOMAIN_SEPARATOR = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\\"EIP712Domain(string name,string version,address verifyingContract)\\\"),\\n\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\tkeccak256(bytes(version)),\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction nonces(address owner) external view override returns (uint256) {\\n\\t\\treturn _nonces[owner];\\n\\t}\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external override {\\n\\t\\trequire(owner != address(0), \\\"INVALID_ZERO_ADDRESS\\\");\\n\\n\\t\\tuint256 currentNonce = _nonces[owner];\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR,\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentNonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n\\t\\trequire(deadline == 0 || block.timestamp <= deadline, \\\"TOO_LATE\\\");\\n\\n\\t\\t_nonces[owner] = currentNonce + 1;\\n\\t\\t_approveFor(owner, spender, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x02445740c092c2b04312960e753b09eb7d5ec5fa4de2c5fe53a8e99130424b1a\",\"license\":\"AGPL-1.0\"},\"src/Interfaces/IERC2612Standalone.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC2612Standalone {\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2befc0ad4cd2092aec2b18927022da7525b09e89d757264be1fcb685d3d02500\",\"license\":\"AGPL-1.0\"},\"src/Libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n\\npragma solidity 0.8.17;\\n\\nlibrary Constants {\\n\\tuint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\tuint256 internal constant DECIMALS_18 = 1000000000000000000;\\n}\\n\",\"keccak256\":\"0x5a31964fb1d840a4adf3d40b192b436ae9ef5e65831da7439f2b8069661d8fc8\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620016c3380380620016c3833981016040819052620000349162000181565b6040805180820190915260018152603160f81b60208201527f91ab3d17e3a50a9d89e63fd30b92be7f5336b03b287bb946787a83a9d62a27666200009760408051808201909152600c81526b053696d706c652045524332360a41b602082015290565b8051602091820120835184830120604080519384019490945292820152606081019190915230608082015260a00160408051601f19818403018152919052805160209091012060805250620000ed8282620000f5565b5050620001e5565b80600080828254620001089190620001bd565b90915550506001600160a01b0382166000908152600160205260408120805483929062000137908490620001bd565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600080604083850312156200019557600080fd5b82516001600160a01b0381168114620001ad57600080fd5b6020939093015192949293505050565b80820180821115620001df57634e487b7160e01b600052601160045260246000fd5b92915050565b6080516114bb620002086000396000818161025101526108fd01526114bb6000f3fe6080604052600436106101445760003560e01c806363d994c7116100c0578063c1d34b8911610074578063d505accf11610059578063d505accf146103ea578063dd62ed3e1461040a578063e7fcb0651461042a57600080fd5b8063c1d34b89146103aa578063cae9ca51146103ca57600080fd5b80637ecebe00116100a55780637ecebe001461030b57806395d89b4114610341578063a9059cbb1461038a57600080fd5b806363d994c7146102b557806370a08231146102d557600080fd5b806323b872dd116101175780633644e515116100fc5780633644e5151461023f5780634000aea01461027357806342966c681461029357600080fd5b806323b872dd14610203578063313ce5671461022357600080fd5b806306fdde0314610149578063095ea7b3146101a15780630e02df54146101d157806318160ddd146101e4575b600080fd5b34801561015557600080fd5b5060408051808201909152600c81527f53696d706c65204552433230000000000000000000000000000000000000000060208201525b6040516101989190610f63565b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004610fc9565b61043d565b6040519015158152602001610198565b6101c16101df36600461101b565b610454565b3480156101f057600080fd5b506000545b604051908152602001610198565b34801561020f57600080fd5b506101c161021e3660046110e6565b6105d3565b34801561022f57600080fd5b5060405160128152602001610198565b34801561024b57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027f57600080fd5b506101c161028e366004611170565b6105ea565b34801561029f57600080fd5b506102b36102ae3660046111cc565b61068e565b005b3480156102c157600080fd5b506101c16102d03660046111e5565b61069d565b3480156102e157600080fd5b506101f56102f0366004611258565b6001600160a01b031660009081526001602052604090205490565b34801561031757600080fd5b506101f5610326366004611258565b6001600160a01b031660009081526003602052604090205490565b34801561034d57600080fd5b5061018b6040518060400160405280600681526020017f53494d504c45000000000000000000000000000000000000000000000000000081525081565b34801561039657600080fd5b506101c16103a5366004610fc9565b610744565b3480156103b657600080fd5b506101c16103c53660046111e5565b610751565b3480156103d657600080fd5b506101c16103e5366004611170565b6107a9565b3480156103f657600080fd5b506102b361040536600461127c565b6107ff565b34801561041657600080fd5b506101f56104253660046112f3565b610a92565b6101c1610438366004610fc9565b610ad9565b600061044a338484610b1b565b5060015b92915050565b6000808351346104649190611342565b90508351816104739190611364565b34146104c65760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4d53475f56414c554500000000000000000000000000000060448201526064015b60405180910390fd5b60008451846104d59190611342565b90508451816104e49190611364565b84146105325760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f544f54414c5f414d4f554e5400000000000000000000000060448201526064016104bd565b60005b85518110156105c757610562338783815181106105545761055461137b565b602002602001015184610be9565b8581815181106105745761057461137b565b60200260200101516001600160a01b03166108fc849081150290604051600060405180830381858888f193505050501580156105b4573d6000803e3d6000fd5b50806105bf81611391565b915050610535565b50600195945050505050565b60006105e0848484610d9a565b5060019392505050565b60006105f7338686610be9565b6040517fa4c0ed360000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063a4c0ed36906106429033908890889088906004016113d6565b6020604051808303816000875af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068591906113ff565b95945050505050565b336106998183610e7f565b5050565b60006106aa338686610be9565b6040517f9b6be0650000000000000000000000000000000000000000000000000000000081526001600160a01b03861690639b6be065906106f79033908a90899089908990600401611421565b6020604051808303816000875af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906113ff565b9695505050505050565b600061044a338484610be9565b600061075e868686610d9a565b6040517fa4c0ed360000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063a4c0ed36906106f79089908890889088906004016113d6565b60006107b6338686610b1b565b6040517eba451f0000000000000000000000000000000000000000000000000000000081526001600160a01b0386169062ba451f906106429033908890889088906004016113d6565b6001600160a01b0387166108555760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b0387811660008181526003602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0850190915280519101207f19010000000000000000000000000000000000000000000000000000000000006101008401527f0000000000000000000000000000000000000000000000000000000000000000610102840152610122830152906101420160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015610995573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b0316146109ff5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104bd565b851580610a0c5750854211155b610a585760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c41544500000000000000000000000000000000000000000000000060448201526064016104bd565b610a6382600161145f565b6001600160a01b038a16600090815260036020526040902055610a87898989610b1b565b505050505050505050565b6000306001600160a01b03841603610aad575060001961044e565b506001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000610ae6338484610be9565b6040516001600160a01b038416903480156108fc02916000818181858888f193505050501580156105e0573d6000803e3d6000fd5b6001600160a01b03831615801590610b3b57506001600160a01b03821615155b610b875760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038216610c3f5760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b306001600160a01b03831603610c975760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f544849535f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b03831660009081526001602052604090205481811015610d005760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f544f4b454e5300000000000000000000000000000060448201526064016104bd565b610d0a8282611472565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290610d4090849061145f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8c91815260200190565b60405180910390a350505050565b336001600160a01b03841614801590610dbc57506001600160a01b0383163014155b15610e6f576001600160a01b03831660009081526002602090815260408083203384529091529020546000198114610e6d5781811015610e3e5760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f495a45445f414c4c4f57414e434500000000000000000060448201526064016104bd565b610e488282611472565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b505b610e7a838383610be9565b505050565b6001600160a01b03821660009081526001602052604090205481811015610ee85760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f544f4b454e5300000000000000000000000000000060448201526064016104bd565b610ef28282611472565b6001600160a01b03841660009081526001602052604081209190915580548391908190610f20908490611472565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610bdc565b600060208083528351808285015260005b81811015610f9057858101830151858201604001528201610f74565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610fc657600080fd5b50565b60008060408385031215610fdc57600080fd5b8235610fe781610fb1565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b803561101681610fb1565b919050565b6000806040838503121561102e57600080fd5b823567ffffffffffffffff8082111561104657600080fd5b818501915085601f83011261105a57600080fd5b813560208282111561106e5761106e610ff5565b8160051b604051601f19603f8301168101818110868211171561109357611093610ff5565b6040529283528183019350848101820192898411156110b157600080fd5b948201945b838610156110d6576110c78661100b565b855294820194938201936110b6565b9997909101359750505050505050565b6000806000606084860312156110fb57600080fd5b833561110681610fb1565b9250602084013561111681610fb1565b929592945050506040919091013590565b60008083601f84011261113957600080fd5b50813567ffffffffffffffff81111561115157600080fd5b60208301915083602082850101111561116957600080fd5b9250929050565b6000806000806060858703121561118657600080fd5b843561119181610fb1565b935060208501359250604085013567ffffffffffffffff8111156111b457600080fd5b6111c087828801611127565b95989497509550505050565b6000602082840312156111de57600080fd5b5035919050565b6000806000806000608086880312156111fd57600080fd5b853561120881610fb1565b9450602086013561121881610fb1565b935060408601359250606086013567ffffffffffffffff81111561123b57600080fd5b61124788828901611127565b969995985093965092949392505050565b60006020828403121561126a57600080fd5b813561127581610fb1565b9392505050565b600080600080600080600060e0888a03121561129757600080fd5b87356112a281610fb1565b965060208801356112b281610fb1565b95506040880135945060608801359350608088013560ff811681146112d657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561130657600080fd5b823561131181610fb1565b9150602083013561132181610fb1565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60008261135f57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761044e5761044e61132c565b634e487b7160e01b600052603260045260246000fd5b600060001982036113a4576113a461132c565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b038516815283602082015260606040820152600061073a6060830184866113ab565b60006020828403121561141157600080fd5b8151801515811461127557600080fd5b60006001600160a01b038088168352808716602084015250846040830152608060608301526114546080830184866113ab565b979650505050505050565b8082018082111561044e5761044e61132c565b8181038181111561044e5761044e61132c56fea26469706673582212205453f74849455b2fa4252b2ce3ff7c0ee4255e87d7afdcadccebaf31a26c293c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806363d994c7116100c0578063c1d34b8911610074578063d505accf11610059578063d505accf146103ea578063dd62ed3e1461040a578063e7fcb0651461042a57600080fd5b8063c1d34b89146103aa578063cae9ca51146103ca57600080fd5b80637ecebe00116100a55780637ecebe001461030b57806395d89b4114610341578063a9059cbb1461038a57600080fd5b806363d994c7146102b557806370a08231146102d557600080fd5b806323b872dd116101175780633644e515116100fc5780633644e5151461023f5780634000aea01461027357806342966c681461029357600080fd5b806323b872dd14610203578063313ce5671461022357600080fd5b806306fdde0314610149578063095ea7b3146101a15780630e02df54146101d157806318160ddd146101e4575b600080fd5b34801561015557600080fd5b5060408051808201909152600c81527f53696d706c65204552433230000000000000000000000000000000000000000060208201525b6040516101989190610f63565b60405180910390f35b3480156101ad57600080fd5b506101c16101bc366004610fc9565b61043d565b6040519015158152602001610198565b6101c16101df36600461101b565b610454565b3480156101f057600080fd5b506000545b604051908152602001610198565b34801561020f57600080fd5b506101c161021e3660046110e6565b6105d3565b34801561022f57600080fd5b5060405160128152602001610198565b34801561024b57600080fd5b506101f57f000000000000000000000000000000000000000000000000000000000000000081565b34801561027f57600080fd5b506101c161028e366004611170565b6105ea565b34801561029f57600080fd5b506102b36102ae3660046111cc565b61068e565b005b3480156102c157600080fd5b506101c16102d03660046111e5565b61069d565b3480156102e157600080fd5b506101f56102f0366004611258565b6001600160a01b031660009081526001602052604090205490565b34801561031757600080fd5b506101f5610326366004611258565b6001600160a01b031660009081526003602052604090205490565b34801561034d57600080fd5b5061018b6040518060400160405280600681526020017f53494d504c45000000000000000000000000000000000000000000000000000081525081565b34801561039657600080fd5b506101c16103a5366004610fc9565b610744565b3480156103b657600080fd5b506101c16103c53660046111e5565b610751565b3480156103d657600080fd5b506101c16103e5366004611170565b6107a9565b3480156103f657600080fd5b506102b361040536600461127c565b6107ff565b34801561041657600080fd5b506101f56104253660046112f3565b610a92565b6101c1610438366004610fc9565b610ad9565b600061044a338484610b1b565b5060015b92915050565b6000808351346104649190611342565b90508351816104739190611364565b34146104c65760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f4d53475f56414c554500000000000000000000000000000060448201526064015b60405180910390fd5b60008451846104d59190611342565b90508451816104e49190611364565b84146105325760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f544f54414c5f414d4f554e5400000000000000000000000060448201526064016104bd565b60005b85518110156105c757610562338783815181106105545761055461137b565b602002602001015184610be9565b8581815181106105745761057461137b565b60200260200101516001600160a01b03166108fc849081150290604051600060405180830381858888f193505050501580156105b4573d6000803e3d6000fd5b50806105bf81611391565b915050610535565b50600195945050505050565b60006105e0848484610d9a565b5060019392505050565b60006105f7338686610be9565b6040517fa4c0ed360000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063a4c0ed36906106429033908890889088906004016113d6565b6020604051808303816000875af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068591906113ff565b95945050505050565b336106998183610e7f565b5050565b60006106aa338686610be9565b6040517f9b6be0650000000000000000000000000000000000000000000000000000000081526001600160a01b03861690639b6be065906106f79033908a90899089908990600401611421565b6020604051808303816000875af1158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a91906113ff565b9695505050505050565b600061044a338484610be9565b600061075e868686610d9a565b6040517fa4c0ed360000000000000000000000000000000000000000000000000000000081526001600160a01b0386169063a4c0ed36906106f79089908890889088906004016113d6565b60006107b6338686610b1b565b6040517eba451f0000000000000000000000000000000000000000000000000000000081526001600160a01b0386169062ba451f906106429033908890889088906004016113d6565b6001600160a01b0387166108555760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b0387811660008181526003602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e0850190915280519101207f19010000000000000000000000000000000000000000000000000000000000006101008401527f0000000000000000000000000000000000000000000000000000000000000000610102840152610122830152906101420160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015610995573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b0316146109ff5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e415455524500000000000000000000000000000060448201526064016104bd565b851580610a0c5750854211155b610a585760405162461bcd60e51b815260206004820152600860248201527f544f4f5f4c41544500000000000000000000000000000000000000000000000060448201526064016104bd565b610a6382600161145f565b6001600160a01b038a16600090815260036020526040902055610a87898989610b1b565b505050505050505050565b6000306001600160a01b03841603610aad575060001961044e565b506001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000610ae6338484610be9565b6040516001600160a01b038416903480156108fc02916000818181858888f193505050501580156105e0573d6000803e3d6000fd5b6001600160a01b03831615801590610b3b57506001600160a01b03821615155b610b875760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038216610c3f5760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f5a45524f5f4144445245535300000000000000000000000060448201526064016104bd565b306001600160a01b03831603610c975760405162461bcd60e51b815260206004820152601460248201527f494e56414c49445f544849535f4144445245535300000000000000000000000060448201526064016104bd565b6001600160a01b03831660009081526001602052604090205481811015610d005760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f544f4b454e5300000000000000000000000000000060448201526064016104bd565b610d0a8282611472565b6001600160a01b038086166000908152600160205260408082209390935590851681529081208054849290610d4090849061145f565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d8c91815260200190565b60405180910390a350505050565b336001600160a01b03841614801590610dbc57506001600160a01b0383163014155b15610e6f576001600160a01b03831660009081526002602090815260408083203384529091529020546000198114610e6d5781811015610e3e5760405162461bcd60e51b815260206004820152601760248201527f4e4f545f415554484f495a45445f414c4c4f57414e434500000000000000000060448201526064016104bd565b610e488282611472565b6001600160a01b03851660009081526002602090815260408083203384529091529020555b505b610e7a838383610be9565b505050565b6001600160a01b03821660009081526001602052604090205481811015610ee85760405162461bcd60e51b815260206004820152601160248201527f4e4f545f454e4f5547485f544f4b454e5300000000000000000000000000000060448201526064016104bd565b610ef28282611472565b6001600160a01b03841660009081526001602052604081209190915580548391908190610f20908490611472565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610bdc565b600060208083528351808285015260005b81811015610f9057858101830151858201604001528201610f74565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610fc657600080fd5b50565b60008060408385031215610fdc57600080fd5b8235610fe781610fb1565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b803561101681610fb1565b919050565b6000806040838503121561102e57600080fd5b823567ffffffffffffffff8082111561104657600080fd5b818501915085601f83011261105a57600080fd5b813560208282111561106e5761106e610ff5565b8160051b604051601f19603f8301168101818110868211171561109357611093610ff5565b6040529283528183019350848101820192898411156110b157600080fd5b948201945b838610156110d6576110c78661100b565b855294820194938201936110b6565b9997909101359750505050505050565b6000806000606084860312156110fb57600080fd5b833561110681610fb1565b9250602084013561111681610fb1565b929592945050506040919091013590565b60008083601f84011261113957600080fd5b50813567ffffffffffffffff81111561115157600080fd5b60208301915083602082850101111561116957600080fd5b9250929050565b6000806000806060858703121561118657600080fd5b843561119181610fb1565b935060208501359250604085013567ffffffffffffffff8111156111b457600080fd5b6111c087828801611127565b95989497509550505050565b6000602082840312156111de57600080fd5b5035919050565b6000806000806000608086880312156111fd57600080fd5b853561120881610fb1565b9450602086013561121881610fb1565b935060408601359250606086013567ffffffffffffffff81111561123b57600080fd5b61124788828901611127565b969995985093965092949392505050565b60006020828403121561126a57600080fd5b813561127581610fb1565b9392505050565b600080600080600080600060e0888a03121561129757600080fd5b87356112a281610fb1565b965060208801356112b281610fb1565b95506040880135945060608801359350608088013560ff811681146112d657600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561130657600080fd5b823561131181610fb1565b9150602083013561132181610fb1565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b60008261135f57634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761044e5761044e61132c565b634e487b7160e01b600052603260045260246000fd5b600060001982036113a4576113a461132c565b5060010190565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b6001600160a01b038516815283602082015260606040820152600061073a6060830184866113ab565b60006020828403121561141157600080fd5b8151801515811461127557600080fd5b60006001600160a01b038088168352808716602084015250846040830152608060608301526114546080830184866113ab565b979650505050505050565b8082018082111561044e5761044e61132c565b8181038181111561044e5761044e61132c56fea26469706673582212205453f74849455b2fa4252b2ce3ff7c0ee4255e87d7afdcadccebaf31a26c293c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8574,
        "contract": "src/ERC20/SimpleERC20.sol:SimpleERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8578,
        "contract": "src/ERC20/SimpleERC20.sol:SimpleERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8584,
        "contract": "src/ERC20/SimpleERC20.sol:SimpleERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9457,
        "contract": "src/ERC20/SimpleERC20.sol:SimpleERC20",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}